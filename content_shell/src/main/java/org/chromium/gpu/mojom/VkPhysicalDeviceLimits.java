package org.chromium.gpu.mojom;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import org.chromium.blink.mojom.CssSampleId;
import org.chromium.blink.mojom.WebFeature;
import org.chromium.mojo.bindings.DataHeader;
import org.chromium.mojo.bindings.Decoder;
import org.chromium.mojo.bindings.Encoder;
import org.chromium.mojo.bindings.Message;
import org.chromium.mojo.bindings.Struct;
/* loaded from: classes2.dex */
public final class VkPhysicalDeviceLimits extends Struct {
    private static final DataHeader DEFAULT_STRUCT_INFO;
    private static final int STRUCT_SIZE = 488;
    private static final DataHeader[] VERSION_ARRAY;
    public long bufferImageGranularity;
    public int discreteQueuePriorities;
    public int framebufferColorSampleCounts;
    public int framebufferDepthSampleCounts;
    public int framebufferNoAttachmentsSampleCounts;
    public int framebufferStencilSampleCounts;
    public float lineWidthGranularity;
    public float[] lineWidthRange;
    public int maxBoundDescriptorSets;
    public int maxClipDistances;
    public int maxColorAttachments;
    public int maxCombinedClipAndCullDistances;
    public int maxComputeSharedMemorySize;
    public int[] maxComputeWorkGroupCount;
    public int maxComputeWorkGroupInvocations;
    public int[] maxComputeWorkGroupSize;
    public int maxCullDistances;
    public int maxDescriptorSetInputAttachments;
    public int maxDescriptorSetSampledImages;
    public int maxDescriptorSetSamplers;
    public int maxDescriptorSetStorageBuffers;
    public int maxDescriptorSetStorageBuffersDynamic;
    public int maxDescriptorSetStorageImages;
    public int maxDescriptorSetUniformBuffers;
    public int maxDescriptorSetUniformBuffersDynamic;
    public int maxDrawIndexedIndexValue;
    public int maxDrawIndirectCount;
    public int maxFragmentCombinedOutputResources;
    public int maxFragmentDualSrcAttachments;
    public int maxFragmentInputComponents;
    public int maxFragmentOutputAttachments;
    public int maxFramebufferHeight;
    public int maxFramebufferLayers;
    public int maxFramebufferWidth;
    public int maxGeometryInputComponents;
    public int maxGeometryOutputComponents;
    public int maxGeometryOutputVertices;
    public int maxGeometryShaderInvocations;
    public int maxGeometryTotalOutputComponents;
    public int maxImageArrayLayers;
    public int maxImageDimension1D;
    public int maxImageDimension2D;
    public int maxImageDimension3D;
    public int maxImageDimensionCube;
    public float maxInterpolationOffset;
    public int maxMemoryAllocationCount;
    public int maxPerStageDescriptorInputAttachments;
    public int maxPerStageDescriptorSampledImages;
    public int maxPerStageDescriptorSamplers;
    public int maxPerStageDescriptorStorageBuffers;
    public int maxPerStageDescriptorStorageImages;
    public int maxPerStageDescriptorUniformBuffers;
    public int maxPerStageResources;
    public int maxPushConstantsSize;
    public int maxSampleMaskWords;
    public int maxSamplerAllocationCount;
    public float maxSamplerAnisotropy;
    public float maxSamplerLodBias;
    public int maxStorageBufferRange;
    public int maxTessellationControlPerPatchOutputComponents;
    public int maxTessellationControlPerVertexInputComponents;
    public int maxTessellationControlPerVertexOutputComponents;
    public int maxTessellationControlTotalOutputComponents;
    public int maxTessellationEvaluationInputComponents;
    public int maxTessellationEvaluationOutputComponents;
    public int maxTessellationGenerationLevel;
    public int maxTessellationPatchSize;
    public int maxTexelBufferElements;
    public int maxTexelGatherOffset;
    public int maxTexelOffset;
    public int maxUniformBufferRange;
    public int maxVertexInputAttributeOffset;
    public int maxVertexInputAttributes;
    public int maxVertexInputBindingStride;
    public int maxVertexInputBindings;
    public int maxVertexOutputComponents;
    public int[] maxViewportDimensions;
    public int maxViewports;
    public float minInterpolationOffset;
    public long minMemoryMapAlignment;
    public long minStorageBufferOffsetAlignment;
    public long minTexelBufferOffsetAlignment;
    public int minTexelGatherOffset;
    public int minTexelOffset;
    public long minUniformBufferOffsetAlignment;
    public int mipmapPrecisionBits;
    public long nonCoherentAtomSize;
    public long optimalBufferCopyOffsetAlignment;
    public long optimalBufferCopyRowPitchAlignment;
    public float pointSizeGranularity;
    public float[] pointSizeRange;
    public int sampledImageColorSampleCounts;
    public int sampledImageDepthSampleCounts;
    public int sampledImageIntegerSampleCounts;
    public int sampledImageStencilSampleCounts;
    public long sparseAddressSpaceSize;
    public boolean standardSampleLocations;
    public int storageImageSampleCounts;
    public boolean strictLines;
    public int subPixelInterpolationOffsetBits;
    public int subPixelPrecisionBits;
    public int subTexelPrecisionBits;
    public boolean timestampComputeAndGraphics;
    public float timestampPeriod;
    public float[] viewportBoundsRange;
    public int viewportSubPixelBits;

    static {
        DataHeader[] dataHeaderArr = {new DataHeader(488, 0)};
        VERSION_ARRAY = dataHeaderArr;
        DEFAULT_STRUCT_INFO = dataHeaderArr[0];
    }

    private VkPhysicalDeviceLimits(int version) {
        super(488, version);
    }

    public VkPhysicalDeviceLimits() {
        this(0);
    }

    public static VkPhysicalDeviceLimits deserialize(Message message) {
        return decode(new Decoder(message));
    }

    public static VkPhysicalDeviceLimits deserialize(ByteBuffer data) {
        return deserialize(new Message(data, new ArrayList()));
    }

    public static VkPhysicalDeviceLimits decode(Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        try {
            DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            int elementsOrVersion = mainDataHeader.elementsOrVersion;
            VkPhysicalDeviceLimits result = new VkPhysicalDeviceLimits(elementsOrVersion);
            result.maxImageDimension1D = decoder0.readInt(8);
            result.maxImageDimension2D = decoder0.readInt(12);
            result.maxImageDimension3D = decoder0.readInt(16);
            result.maxImageDimensionCube = decoder0.readInt(20);
            result.maxImageArrayLayers = decoder0.readInt(24);
            result.maxTexelBufferElements = decoder0.readInt(28);
            result.maxUniformBufferRange = decoder0.readInt(32);
            result.maxStorageBufferRange = decoder0.readInt(36);
            result.maxPushConstantsSize = decoder0.readInt(40);
            result.maxMemoryAllocationCount = decoder0.readInt(44);
            result.maxSamplerAllocationCount = decoder0.readInt(48);
            result.maxBoundDescriptorSets = decoder0.readInt(52);
            result.bufferImageGranularity = decoder0.readLong(56);
            result.sparseAddressSpaceSize = decoder0.readLong(64);
            result.maxPerStageDescriptorSamplers = decoder0.readInt(72);
            result.maxPerStageDescriptorUniformBuffers = decoder0.readInt(76);
            result.maxPerStageDescriptorStorageBuffers = decoder0.readInt(80);
            result.maxPerStageDescriptorSampledImages = decoder0.readInt(84);
            result.maxPerStageDescriptorStorageImages = decoder0.readInt(88);
            result.maxPerStageDescriptorInputAttachments = decoder0.readInt(92);
            result.maxPerStageResources = decoder0.readInt(96);
            result.maxDescriptorSetSamplers = decoder0.readInt(100);
            result.maxDescriptorSetUniformBuffers = decoder0.readInt(104);
            result.maxDescriptorSetUniformBuffersDynamic = decoder0.readInt(108);
            result.maxDescriptorSetStorageBuffers = decoder0.readInt(112);
            result.maxDescriptorSetStorageBuffersDynamic = decoder0.readInt(116);
            result.maxDescriptorSetSampledImages = decoder0.readInt(120);
            result.maxDescriptorSetStorageImages = decoder0.readInt(124);
            result.maxDescriptorSetInputAttachments = decoder0.readInt(128);
            result.maxVertexInputAttributes = decoder0.readInt(132);
            result.maxVertexInputBindings = decoder0.readInt(136);
            result.maxVertexInputAttributeOffset = decoder0.readInt(140);
            result.maxVertexInputBindingStride = decoder0.readInt(144);
            result.maxVertexOutputComponents = decoder0.readInt(WebFeature.DOM_CHARACTER_DATA_MODIFIED_EVENT);
            result.maxTessellationGenerationLevel = decoder0.readInt(152);
            result.maxTessellationPatchSize = decoder0.readInt(CssSampleId.UNICODE_RANGE);
            result.maxTessellationControlPerVertexInputComponents = decoder0.readInt(160);
            result.maxTessellationControlPerVertexOutputComponents = decoder0.readInt(164);
            result.maxTessellationControlPerPatchOutputComponents = decoder0.readInt(168);
            result.maxTessellationControlTotalOutputComponents = decoder0.readInt(172);
            result.maxTessellationEvaluationInputComponents = decoder0.readInt(176);
            result.maxTessellationEvaluationOutputComponents = decoder0.readInt(180);
            result.maxGeometryShaderInvocations = decoder0.readInt(184);
            result.maxGeometryInputComponents = decoder0.readInt(188);
            result.maxGeometryOutputComponents = decoder0.readInt(192);
            result.maxGeometryOutputVertices = decoder0.readInt(196);
            result.maxGeometryTotalOutputComponents = decoder0.readInt(200);
            result.maxFragmentInputComponents = decoder0.readInt(204);
            result.maxFragmentOutputAttachments = decoder0.readInt(CssSampleId.WEBKIT_BOX_ORDINAL_GROUP);
            result.maxFragmentDualSrcAttachments = decoder0.readInt(212);
            result.maxFragmentCombinedOutputResources = decoder0.readInt(216);
            result.maxComputeSharedMemorySize = decoder0.readInt(220);
            result.maxComputeWorkGroupCount = decoder0.readInts(CssSampleId.ALIAS_WEBKIT_COLUMN_RULE_WIDTH, 0, 3);
            result.maxComputeWorkGroupInvocations = decoder0.readInt(232);
            result.subPixelPrecisionBits = decoder0.readInt(CssSampleId.FLEX_FLOW);
            result.maxComputeWorkGroupSize = decoder0.readInts(240, 0, 3);
            result.subTexelPrecisionBits = decoder0.readInt(248);
            result.mipmapPrecisionBits = decoder0.readInt(252);
            result.maxDrawIndexedIndexValue = decoder0.readInt(256);
            result.maxDrawIndirectCount = decoder0.readInt(260);
            result.maxSamplerLodBias = decoder0.readFloat(264);
            result.maxSamplerAnisotropy = decoder0.readFloat(CssSampleId.WEBKIT_MARGIN_TOP_COLLAPSE);
            result.maxViewports = decoder0.readInt(CssSampleId.ALIAS_WEBKIT_MARGIN_END);
            result.viewportSubPixelBits = decoder0.readInt(WebFeature.HTML_ANCHOR_ELEMENT_PING_ATTRIBUTE);
            result.maxViewportDimensions = decoder0.readInts(CssSampleId.WEBKIT_MASK, 0, 2);
            result.viewportBoundsRange = decoder0.readFloats(288, 0, 2);
            result.minMemoryMapAlignment = decoder0.readLong(296);
            result.minTexelBufferOffsetAlignment = decoder0.readLong(304);
            result.minUniformBufferOffsetAlignment = decoder0.readLong(312);
            result.minStorageBufferOffsetAlignment = decoder0.readLong(320);
            result.minTexelOffset = decoder0.readInt(328);
            result.maxTexelOffset = decoder0.readInt(CssSampleId.ALIAS_WEBKIT_TRANSITION);
            result.minTexelGatherOffset = decoder0.readInt(CssSampleId.ALIAS_WEBKIT_TRANSITION_TIMING_FUNCTION);
            result.maxTexelGatherOffset = decoder0.readInt(340);
            result.minInterpolationOffset = decoder0.readFloat(WebFeature.EVENT_CANCEL_BUBBLE);
            result.maxInterpolationOffset = decoder0.readFloat(CssSampleId.SHAPE_MARGIN);
            result.subPixelInterpolationOffsetBits = decoder0.readInt(WebFeature.EVENT_SET_RETURN_VALUE_TRUE);
            result.maxFramebufferWidth = decoder0.readInt(356);
            result.maxFramebufferHeight = decoder0.readInt(CssSampleId.FLOOD_COLOR);
            result.maxFramebufferLayers = decoder0.readInt(CssSampleId.STOP_OPACITY);
            result.framebufferColorSampleCounts = decoder0.readInt(CssSampleId.COLOR_RENDERING);
            result.framebufferDepthSampleCounts = decoder0.readInt(372);
            result.framebufferStencilSampleCounts = decoder0.readInt(CssSampleId.MASK_TYPE);
            result.framebufferNoAttachmentsSampleCounts = decoder0.readInt(CssSampleId.STROKE_DASHOFFSET);
            result.maxColorAttachments = decoder0.readInt(CssSampleId.STROKE_OPACITY);
            result.sampledImageColorSampleCounts = decoder0.readInt(CssSampleId.DOMINANT_BASELINE);
            result.sampledImageIntegerSampleCounts = decoder0.readInt(CssSampleId.TEXT_ANCHOR);
            result.sampledImageDepthSampleCounts = decoder0.readInt(WebFeature.HTML_IMAGE_ELEMENT_X);
            result.sampledImageStencilSampleCounts = decoder0.readInt(WebFeature.SELECTION_BASE_NODE);
            result.storageImageSampleCounts = decoder0.readInt(404);
            result.maxSampleMaskWords = decoder0.readInt(CssSampleId.ORIENTATION);
            result.timestampComputeAndGraphics = decoder0.readBoolean(412, 0);
            result.strictLines = decoder0.readBoolean(412, 1);
            result.standardSampleLocations = decoder0.readBoolean(412, 2);
            result.timestampPeriod = decoder0.readFloat(416);
            result.maxClipDistances = decoder0.readInt(420);
            result.maxCullDistances = decoder0.readInt(424);
            result.maxCombinedClipAndCullDistances = decoder0.readInt(CssSampleId.ANIMATION_FILL_MODE);
            result.discreteQueuePriorities = decoder0.readInt(432);
            result.pointSizeGranularity = decoder0.readFloat(CssSampleId.ISOLATION);
            result.pointSizeRange = decoder0.readFloats(440, 0, 2);
            result.lineWidthRange = decoder0.readFloats(CssSampleId.TRANSFORM_STYLE, 0, 2);
            result.lineWidthGranularity = decoder0.readFloat(WebFeature.OBSOLETE_ELEMENT_CREATE_SHADOW_ROOT);
            result.optimalBufferCopyOffsetAlignment = decoder0.readLong(CssSampleId.RY);
            result.optimalBufferCopyRowPitchAlignment = decoder0.readLong(CssSampleId.ALIAS_EPUB_TEXT_EMPHASIS_COLOR);
            result.nonCoherentAtomSize = decoder0.readLong(480);
            return result;
        } finally {
            decoder0.decreaseStackDepth();
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    @Override // org.chromium.mojo.bindings.Struct
    public final void encode(Encoder encoder) {
        Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        encoder0.encode(this.maxImageDimension1D, 8);
        encoder0.encode(this.maxImageDimension2D, 12);
        encoder0.encode(this.maxImageDimension3D, 16);
        encoder0.encode(this.maxImageDimensionCube, 20);
        encoder0.encode(this.maxImageArrayLayers, 24);
        encoder0.encode(this.maxTexelBufferElements, 28);
        encoder0.encode(this.maxUniformBufferRange, 32);
        encoder0.encode(this.maxStorageBufferRange, 36);
        encoder0.encode(this.maxPushConstantsSize, 40);
        encoder0.encode(this.maxMemoryAllocationCount, 44);
        encoder0.encode(this.maxSamplerAllocationCount, 48);
        encoder0.encode(this.maxBoundDescriptorSets, 52);
        encoder0.encode(this.bufferImageGranularity, 56);
        encoder0.encode(this.sparseAddressSpaceSize, 64);
        encoder0.encode(this.maxPerStageDescriptorSamplers, 72);
        encoder0.encode(this.maxPerStageDescriptorUniformBuffers, 76);
        encoder0.encode(this.maxPerStageDescriptorStorageBuffers, 80);
        encoder0.encode(this.maxPerStageDescriptorSampledImages, 84);
        encoder0.encode(this.maxPerStageDescriptorStorageImages, 88);
        encoder0.encode(this.maxPerStageDescriptorInputAttachments, 92);
        encoder0.encode(this.maxPerStageResources, 96);
        encoder0.encode(this.maxDescriptorSetSamplers, 100);
        encoder0.encode(this.maxDescriptorSetUniformBuffers, 104);
        encoder0.encode(this.maxDescriptorSetUniformBuffersDynamic, 108);
        encoder0.encode(this.maxDescriptorSetStorageBuffers, 112);
        encoder0.encode(this.maxDescriptorSetStorageBuffersDynamic, 116);
        encoder0.encode(this.maxDescriptorSetSampledImages, 120);
        encoder0.encode(this.maxDescriptorSetStorageImages, 124);
        encoder0.encode(this.maxDescriptorSetInputAttachments, 128);
        encoder0.encode(this.maxVertexInputAttributes, 132);
        encoder0.encode(this.maxVertexInputBindings, 136);
        encoder0.encode(this.maxVertexInputAttributeOffset, 140);
        encoder0.encode(this.maxVertexInputBindingStride, 144);
        encoder0.encode(this.maxVertexOutputComponents, WebFeature.DOM_CHARACTER_DATA_MODIFIED_EVENT);
        encoder0.encode(this.maxTessellationGenerationLevel, 152);
        encoder0.encode(this.maxTessellationPatchSize, CssSampleId.UNICODE_RANGE);
        encoder0.encode(this.maxTessellationControlPerVertexInputComponents, 160);
        encoder0.encode(this.maxTessellationControlPerVertexOutputComponents, 164);
        encoder0.encode(this.maxTessellationControlPerPatchOutputComponents, 168);
        encoder0.encode(this.maxTessellationControlTotalOutputComponents, 172);
        encoder0.encode(this.maxTessellationEvaluationInputComponents, 176);
        encoder0.encode(this.maxTessellationEvaluationOutputComponents, 180);
        encoder0.encode(this.maxGeometryShaderInvocations, 184);
        encoder0.encode(this.maxGeometryInputComponents, 188);
        encoder0.encode(this.maxGeometryOutputComponents, 192);
        encoder0.encode(this.maxGeometryOutputVertices, 196);
        encoder0.encode(this.maxGeometryTotalOutputComponents, 200);
        encoder0.encode(this.maxFragmentInputComponents, 204);
        encoder0.encode(this.maxFragmentOutputAttachments, CssSampleId.WEBKIT_BOX_ORDINAL_GROUP);
        encoder0.encode(this.maxFragmentDualSrcAttachments, 212);
        encoder0.encode(this.maxFragmentCombinedOutputResources, 216);
        encoder0.encode(this.maxComputeSharedMemorySize, 220);
        encoder0.encode(this.maxComputeWorkGroupCount, CssSampleId.ALIAS_WEBKIT_COLUMN_RULE_WIDTH, 0, 3);
        encoder0.encode(this.maxComputeWorkGroupInvocations, 232);
        encoder0.encode(this.subPixelPrecisionBits, CssSampleId.FLEX_FLOW);
        encoder0.encode(this.maxComputeWorkGroupSize, 240, 0, 3);
        encoder0.encode(this.subTexelPrecisionBits, 248);
        encoder0.encode(this.mipmapPrecisionBits, 252);
        encoder0.encode(this.maxDrawIndexedIndexValue, 256);
        encoder0.encode(this.maxDrawIndirectCount, 260);
        encoder0.encode(this.maxSamplerLodBias, 264);
        encoder0.encode(this.maxSamplerAnisotropy, CssSampleId.WEBKIT_MARGIN_TOP_COLLAPSE);
        encoder0.encode(this.maxViewports, CssSampleId.ALIAS_WEBKIT_MARGIN_END);
        encoder0.encode(this.viewportSubPixelBits, WebFeature.HTML_ANCHOR_ELEMENT_PING_ATTRIBUTE);
        encoder0.encode(this.maxViewportDimensions, CssSampleId.WEBKIT_MASK, 0, 2);
        encoder0.encode(this.viewportBoundsRange, 288, 0, 2);
        encoder0.encode(this.minMemoryMapAlignment, 296);
        encoder0.encode(this.minTexelBufferOffsetAlignment, 304);
        encoder0.encode(this.minUniformBufferOffsetAlignment, 312);
        encoder0.encode(this.minStorageBufferOffsetAlignment, 320);
        encoder0.encode(this.minTexelOffset, 328);
        encoder0.encode(this.maxTexelOffset, CssSampleId.ALIAS_WEBKIT_TRANSITION);
        encoder0.encode(this.minTexelGatherOffset, CssSampleId.ALIAS_WEBKIT_TRANSITION_TIMING_FUNCTION);
        encoder0.encode(this.maxTexelGatherOffset, 340);
        encoder0.encode(this.minInterpolationOffset, WebFeature.EVENT_CANCEL_BUBBLE);
        encoder0.encode(this.maxInterpolationOffset, CssSampleId.SHAPE_MARGIN);
        encoder0.encode(this.subPixelInterpolationOffsetBits, WebFeature.EVENT_SET_RETURN_VALUE_TRUE);
        encoder0.encode(this.maxFramebufferWidth, 356);
        encoder0.encode(this.maxFramebufferHeight, CssSampleId.FLOOD_COLOR);
        encoder0.encode(this.maxFramebufferLayers, CssSampleId.STOP_OPACITY);
        encoder0.encode(this.framebufferColorSampleCounts, CssSampleId.COLOR_RENDERING);
        encoder0.encode(this.framebufferDepthSampleCounts, 372);
        encoder0.encode(this.framebufferStencilSampleCounts, CssSampleId.MASK_TYPE);
        encoder0.encode(this.framebufferNoAttachmentsSampleCounts, CssSampleId.STROKE_DASHOFFSET);
        encoder0.encode(this.maxColorAttachments, CssSampleId.STROKE_OPACITY);
        encoder0.encode(this.sampledImageColorSampleCounts, CssSampleId.DOMINANT_BASELINE);
        encoder0.encode(this.sampledImageIntegerSampleCounts, CssSampleId.TEXT_ANCHOR);
        encoder0.encode(this.sampledImageDepthSampleCounts, WebFeature.HTML_IMAGE_ELEMENT_X);
        encoder0.encode(this.sampledImageStencilSampleCounts, WebFeature.SELECTION_BASE_NODE);
        encoder0.encode(this.storageImageSampleCounts, 404);
        encoder0.encode(this.maxSampleMaskWords, CssSampleId.ORIENTATION);
        encoder0.encode(this.timestampComputeAndGraphics, 412, 0);
        encoder0.encode(this.strictLines, 412, 1);
        encoder0.encode(this.standardSampleLocations, 412, 2);
        encoder0.encode(this.timestampPeriod, 416);
        encoder0.encode(this.maxClipDistances, 420);
        encoder0.encode(this.maxCullDistances, 424);
        encoder0.encode(this.maxCombinedClipAndCullDistances, CssSampleId.ANIMATION_FILL_MODE);
        encoder0.encode(this.discreteQueuePriorities, 432);
        encoder0.encode(this.pointSizeGranularity, CssSampleId.ISOLATION);
        encoder0.encode(this.pointSizeRange, 440, 0, 2);
        encoder0.encode(this.lineWidthRange, CssSampleId.TRANSFORM_STYLE, 0, 2);
        encoder0.encode(this.lineWidthGranularity, WebFeature.OBSOLETE_ELEMENT_CREATE_SHADOW_ROOT);
        encoder0.encode(this.optimalBufferCopyOffsetAlignment, CssSampleId.RY);
        encoder0.encode(this.optimalBufferCopyRowPitchAlignment, CssSampleId.ALIAS_EPUB_TEXT_EMPHASIS_COLOR);
        encoder0.encode(this.nonCoherentAtomSize, 480);
    }
}
